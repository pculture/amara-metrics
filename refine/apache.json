[
  {
    "op": "core/column-split",
    "description": "Split column Column 1 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " - - [",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 1 to IP",
    "oldColumnName": "Column 1 1",
    "newColumnName": "IP"
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "] \"",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 1 to Request Start Time",
    "oldColumnName": "Column 1 2 1",
    "newColumnName": "Request Start Time"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Request Start Time using expression grel:value.toDate(\"dd/MMM/yyyy:hh:mm:ss Z\")",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Request Start Time",
    "expression": "grel:value.toDate(\"dd/MMM/yyyy:hh:mm:ss Z\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 1 to Request Type",
    "oldColumnName": "Column 1 2 2 1",
    "newColumnName": "Request Type"
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "\" ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 1 to URL",
    "oldColumnName": "Column 1 2 2 2 1",
    "newColumnName": "URL"
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 2 1 to Response Code",
    "oldColumnName": "Column 1 2 2 2 2 1",
    "newColumnName": "Response Code"
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 2 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2 2 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": " \"",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 2 2 1 to Response Size",
    "oldColumnName": "Column 1 2 2 2 2 2 1",
    "newColumnName": "Response Size"
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 2 2 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2 2 2 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "\" \"",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 2 2 2 1 to Referer",
    "oldColumnName": "Column 1 2 2 2 2 2 2 1",
    "newColumnName": "Referer"
  },
  {
    "op": "core/text-transform",
    "description": "Text transform on cells in column Referer using expression clojure:(when-not (= value \"-\") value)",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Referer",
    "expression": "clojure:(when-not (= value \"-\") value)",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10
  },
  {
    "op": "core/column-split",
    "description": "Split column Column 1 2 2 2 2 2 2 2 by separator",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Column 1 2 2 2 2 2 2 2",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "\" ",
    "regex": false,
    "maxColumns": 2
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 2 2 2 2 1 to User Agent",
    "oldColumnName": "Column 1 2 2 2 2 2 2 2 1",
    "newColumnName": "User Agent"
  },
  {
    "op": "core/column-rename",
    "description": "Rename column Column 1 2 2 2 2 2 2 2 2 to Response Time (microseconds)",
    "oldColumnName": "Column 1 2 2 2 2 2 2 2 2",
    "newColumnName": "Response Time (microseconds)"
  },
  {
    "op": "core/column-addition",
    "description": "Create column Clean URL at index 4 based on column URL using expression clojure:(second (re-matches #\"(.*)HTTP/1..$\" value))",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "Clean URL",
    "columnInsertIndex": 4,
    "baseColumnName": "URL",
    "expression": "clojure:(second (re-matches #\"(.*)HTTP/1..$\" value))",
    "onError": "keep-original"
  },
  {
    "op": "core/column-addition",
    "description": "Create column URL 1 at index 5 based on column Clean URL using expression clojure:(apply str (take 1 (re-seq #\"/[^/]*\" value)))",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "URL 1",
    "columnInsertIndex": 5,
    "baseColumnName": "Clean URL",
    "expression": "clojure:(apply str (take 1 (re-seq #\"/[^/]*\" value)))",
    "onError": "keep-original"
  },
  {
    "op": "core/column-removal",
    "description": "Remove column URL",
    "columnName": "URL"
  },
  {
    "op": "core/column-addition",
    "description": "Create column Response Time (ms) at index 10 based on column Response Time (microseconds) using expression clojure:(float (/ value 1000))",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "Response Time (ms)",
    "columnInsertIndex": 10,
    "baseColumnName": "Response Time (microseconds)",
    "expression": "clojure:(float (/ value 1000))",
    "onError": "set-to-blank"
  },
  {
    "op": "core/column-addition",
    "description": "Create column URL 2 at index 4 based on column Clean URL using expression clojure:(apply str (take 2 (re-seq #\"/[^/]+\" value)))",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "newColumnName": "URL 2",
    "columnInsertIndex": 4,
    "baseColumnName": "Clean URL",
    "expression": "clojure:(apply str (take 2 (re-seq #\"/[^/]+\" value)))",
    "onError": "keep-original"
  },
  {
    "op": "core/column-move",
    "description": "Move column URL 2 to position 5",
    "columnName": "URL 2",
    "index": 5
  }
]
